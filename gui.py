
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, ACTIVE,END,Listbox
import tkinter as tk
from pygame import mixer
import os
from mutagen.mp3 import MP3
import time
from tkinter import ttk
import pyodbc as odbc
import re

# Establish a connection to the SQL Server database
driver_name = "SQL SERVER"
server_name = "localhost\SQLEXPRESS"
Database_Name = "SmartMusicPlayer"

connection_string = f"""
    DRIVER={{{driver_name}}};
    SERVER={server_name};
    DATABASE={Database_Name};
    Trust_Connection = yes;
"""

connection = odbc.connect(connection_string)
print(connection)

# Create a cursor
cursor = connection.cursor()

# Retrieve data from the database
cursor.execute("SELECT SongName, ArtistName, ExplictLabel FROM SongsClassification")
rows = cursor.fetchall()

# Retrieve data from the database
cursor.execute("SELECT SongName, ArtistName, ExplictLabel FROM SongsClassification")
rows = cursor.fetchall()

# Define a function that toggles between the play and pause button icons and controls the playback of the music


def toggle_playback():
    global is_playing
    if not is_playing:
        # Get the selected song from the playlist
        song_name = return_songName()
        artist_name = return_artistName()
        
        # Retrieve the music path from the database based on the selected song
        cursor.execute("SELECT MusicPath FROM SongsClassification WHERE SongName = ? AND ArtistName = ?", (song_name, artist_name))
        result = cursor.fetchone()
        print(result)
        if result:
            music_path = result[0]
            
            # Load and play the music
            mixer.music.load(music_path)
            mixer.music.play()
            
            # Update the song duration, name, album, time, etc.
            duration_text.config(text=music_duration())
            active_song_name.config(text=limit_the_text_length())
            active_song_album.config(text=limit_the_album_length())
            update_active_song_time()
            update_time_bar()
            
            
            
            # Update the explict icon visibility
            update_icon_visibility()
            
            # Change the button icon to the pause icon
            play_button.place_forget()
            pause_button.place(x=707.0, y=626.0, width=46.0, height=61.0)
            
            is_playing = True
    else:
        # Pause the music
        mixer.music.pause()
        
        # Change the button icon to the play icon
        pause_button.place_forget()
        play_button.place(x=707.0, y=626.0, width=46.0, height=61.0)
        
        is_playing = False



def play_next_song():
    # Get the index of the currently selected song in the playlist
    selected_item = tree.selection()
    if selected_item:
        current_song_index = tree.index(selected_item)
        # Increment the index to get the index of the next song
        next_song_index = current_song_index + 1
        # Wrap around to the beginning of the playlist if necessary
        tree_size = len(tree.get_children())
        print("tree size is :::")
        print(tree_size)
        if next_song_index >= tree_size:
            next_song_index = 0
        # Select the next song in the playlist
        tree.selection_remove(tree.selection())
        item_id = tree.get_children()[next_song_index]
        tree.selection_set(item_id)
        tree.focus(item_id)
      # Load and play the next song in the playlist
        the_nextSong_toPlay = tree.item(tree.get_children()[next_song_index]) #get the full row of the song
        selected_song = the_nextSong_toPlay
        print("here is the next song loaded:  ")
        print(selected_song)
    
        #get the song name and artist name to quary the path of the next song
        song_name = the_nextSong_toPlay["values"][0]
        artist_name = the_nextSong_toPlay["values"][1]
        
        print("here is the next song name:  ")
        print(song_name)
          
        print("here is the next artist name:  ")
        print(artist_name)
    
        # Retrieve the music path from the database based on the selected song
        cursor.execute("SELECT MusicPath FROM SongsClassification WHERE SongName = ? AND ArtistName = ?", (song_name, artist_name))
        result = cursor.fetchone()
        print(result)
        if result:
            music_path = result[0]
    
            # Load and play the music
            mixer.music.load(music_path)
            mixer.music.play()
        
        # update the next song details
        duration_text.config(text=music_duration())
        active_song_name.config(text=limit_the_text_length())
        active_song_album.config(text=limit_the_album_length())
        update_active_song_time()
        update_time_bar()
        
        # Update the explict icon visibility
        update_icon_visibility()
        
        # Change the button icon to the pause icon
        play_button.place_forget()
        pause_button.place(x=707.0, y=626.0, width=46.0, height=61.0)
        
        is_playing = True
    else:
        item_id = tree.get_children()[0]
        tree.selection_set(item_id)
        tree.focus(item_id)
        
        # Load and play the next song in the playlist
        the_nextSong_toPlay = tree.item(tree.get_children()[0]) #get the full row of the song
        selected_song = the_nextSong_toPlay
        print("here is the next song loaded:  ")
        print(selected_song)
    
        #get the song name and artist name to quary the path of the next song
        song_name = the_nextSong_toPlay["values"][0]
        artist_name = the_nextSong_toPlay["values"][1]
        
        print("here is the next song name:  ")
        print(song_name)
          
        print("here is the next artist name:  ")
        print(artist_name)
    
        # Retrieve the music path from the database based on the selected song
        cursor.execute("SELECT MusicPath FROM SongsClassification WHERE SongName = ? AND ArtistName = ?", (song_name, artist_name))
        result = cursor.fetchone()
        print(result)
        if result:
            music_path = result[0]
    
            # Load and play the music
            mixer.music.load(music_path)
            mixer.music.play()
        
        # update the next song details
        duration_text.config(text=music_duration())
        active_song_name.config(text=limit_the_text_length())
        active_song_album.config(text=limit_the_album_length())
        update_active_song_time()
        update_time_bar()
        
        # Update the explict icon visibility
        update_icon_visibility()
        
        # Change the button icon to the pause icon
        play_button.place_forget()
        pause_button.place(x=707.0, y=626.0, width=46.0, height=61.0)
        
        is_playing = True
        

        


def play_prev_song():
    
    # Get the index of the currently selected song in the playlist
    selected_item = tree.selection()
    if selected_item:
        current_song_index = tree.index(selected_item)
        # Increment the index to get the index of the next song
        next_song_index = current_song_index - 1
        # Wrap around to the beginning of the playlist if necessary
        tree_size = len(tree.get_children())
        print("tree size is :::")
        print(tree_size)
        if next_song_index < 0:
            next_song_index = tree_size-1
        # Select the next song in the playlist
        tree.selection_remove(tree.selection())
        item_id = tree.get_children()[next_song_index]
        tree.selection_set(item_id)
        tree.focus(item_id)
      # Load and play the next song in the playlist
        the_nextSong_toPlay = tree.item(tree.get_children()[next_song_index]) #get the full row of the song
        selected_song = the_nextSong_toPlay
        print("here is the next song loaded:  ")
        print(selected_song)
    
        #get the song name and artist name to quary the path of the next song
        song_name = the_nextSong_toPlay["values"][0]
        artist_name = the_nextSong_toPlay["values"][1]
        
        print("here is the next song name:  ")
        print(song_name)
          
        print("here is the next artist name:  ")
        print(artist_name)
    
        # Retrieve the music path from the database based on the selected song
        cursor.execute("SELECT MusicPath FROM SongsClassification WHERE SongName = ? AND ArtistName = ?", (song_name, artist_name))
        result = cursor.fetchone()
        print(result)
        if result:
            music_path = result[0]
    
            # Load and play the music
            mixer.music.load(music_path)
            mixer.music.play()
        
        # update the next song details
        duration_text.config(text=music_duration())
        active_song_name.config(text=limit_the_text_length())
        active_song_album.config(text=limit_the_album_length())
        update_active_song_time()
        update_time_bar()
        
        # Update the explict icon visibility
        update_icon_visibility()
        
        # Change the button icon to the pause icon
        play_button.place_forget()
        pause_button.place(x=707.0, y=626.0, width=46.0, height=61.0)
        
        is_playing = True
    else:
        item_id = tree.get_children()[0]
        tree.selection_set(item_id)
        tree.focus(item_id)
        
        # Load and play the next song in the playlist
        the_nextSong_toPlay = tree.item(tree.get_children()[0]) #get the full row of the song
        selected_song = the_nextSong_toPlay
        print("here is the next song loaded:  ")
        print(selected_song)
    
        #get the song name and artist name to quary the path of the next song
        song_name = the_nextSong_toPlay["values"][0]
        artist_name = the_nextSong_toPlay["values"][1]
        
        print("here is the next song name:  ")
        print(song_name)
          
        print("here is the next artist name:  ")
        print(artist_name)
    
        # Retrieve the music path from the database based on the selected song
        cursor.execute("SELECT MusicPath FROM SongsClassification WHERE SongName = ? AND ArtistName = ?", (song_name, artist_name))
        result = cursor.fetchone()
        print(result)
        if result:
            music_path = result[0]
    
            # Load and play the music
            mixer.music.load(music_path)
            mixer.music.play()
        
        # update the next song details
        duration_text.config(text=music_duration())
        active_song_name.config(text=limit_the_text_length())
        active_song_album.config(text=limit_the_album_length())
        update_active_song_time()
        update_time_bar()
        
        # Update the explict icon visibility
        update_icon_visibility()
        
        # Change the button icon to the pause icon
        play_button.place_forget()
        pause_button.place(x=707.0, y=626.0, width=46.0, height=61.0)
        
        is_playing = True
    
    
    

# Initialize the is_playing variable to False
is_playing = False

OUTPUT_PATH = os.path.dirname(os.path.abspath("__file__"))
ASSETS_PATH = OUTPUT_PATH / Path(r"D:/college/GP/assets/frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

class ImageListbox(tk.Listbox):
    def __init__(self, master, **kwargs):
        super().__init__(master, **kwargs)
        self.images = []

    def insert(self, index, *elements, image=None):
        super().insert(index, *elements)
        self.images.insert(index, image)
        self.itemconfig(index, image=image, compound="left")


window = Tk()

window.geometry("1200x700")
window.configure(bg = "#FFFFFF")

# Initialize the mixer module
mixer.init()

canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 700,
    width = 1200,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
canvas.create_rectangle(
    0.0,
    1.0,
    190.0,
    703.0,
    fill="#EAEAEA",
    outline="")

canvas.create_rectangle(
    190.0,
    97.0,
    191.0,
    897.0,
    fill="#CCCCCC",
    outline="")

image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    112.0,
    127.0,
    image=image_image_1
)

canvas.create_rectangle(
    191.0,
    1.0,
    1200.0,
    53.0,
    fill="#F4F4F4",
    outline="")

canvas.create_text(
    640.0,
    21.0,
    anchor="nw",
    text="Hip-Hop Replay",
    fill="#262626",
    font=("SFProDisplay Medium", 16 * -1)
)

canvas.create_text(
    478.0,
    191.0,
    anchor="nw",
    text="Сейчас, когда музыки вокруг очень много, легко пропустить яркую новинку, не \nуделив ей должного внимания. Здесь собраны только лучшие хип-хоп треки последнего \nвремени. Наши редакторы постоянн...",
    fill="#808080",
    font=("SFProDisplay Regular", 13 * -1)
)

canvas.create_text(
    479.0,
    104.0,
    anchor="nw",
    text="Hip-Hop Replay",
    fill="#262626",
    font=("SFProDisplay Medium", 24 * -1)
)

canvas.create_text(
    473.0,
    135.0,
    anchor="nw",
    text="Robofiy Music Hip Hop/Rap",
    fill="#285689",
    font=("AndadaProRoman Regular", 24 * -1)
)

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_1 clicked"),
    relief="flat"
)
button_1.place(
    x=646.0,
    y=257.0,
    width=153.0,
    height=28.0
)

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_2 clicked"),
    relief="flat"
)
button_2.place(
    x=479.0,
    y=257.0,
    width=153.0,
    height=28.0
)


canvas.create_rectangle(
    213.0,
    334.0,
    1200.0,
    389.0,
    fill="#FAFAFA",
    outline="")




#---------------single song-------------
'''canvas.create_text(
    287.0,
    354.0,
    anchor="nw",
    text="Going Bad (feat. Drake)",
    fill="#262626",
    font=("SFProText Regular", 14 * -1)
)

canvas.create_text(
    657.0,
    355.0,
    anchor="nw",
    text="Meek Mill",
    fill="#7E7E7E",
    font=("SFProText Regular", 12 * -1)
)

canvas.create_text(
    926.0,
    354.0,
    anchor="nw",
    text="Championships",
    fill="#7E7E7E",
    font=("SFProText Regular", 12 * -1)
)

canvas.create_text(
    1157.0,
    356.0,
    anchor="nw",
    text="3:01",
    fill="#7E7E7E",
    font=("SFProText Regular", 12 * -1)
)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    626.0,
    361.0,
    image=image_image_2
)

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    258.0,
    361.0,
    image=image_image_3
)

canvas.create_rectangle(
    213.0,
    442.0,
    1200.0,
    497.0,
    fill="#FAFAFA",
    outline="")
#--------------------------end---------------------
'''
canvas.create_rectangle(
    999.638671875,
    677.5,
    1055.505615234375,
    680.5,
    fill="#BFBFBF",
    outline="")

image_image_13 = PhotoImage(
    file=relative_to_assets("image_13.png"))
image_13 = canvas.create_image(
    1058.66796875,
    678.5,
    image=image_image_13
)

image_image_14 = PhotoImage(
    file=relative_to_assets("image_14.png"))
image_14 = canvas.create_image(
    1079.0,
    679.0,
    image=image_image_14
)

button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))
button_3 = Button(
    image=button_image_3,
    borderwidth=0,
    highlightthickness=0,
    command=play_prev_song,
    relief="flat"
)
button_3.place(
    x=653.0,
    y=636.0,
    width=48.0,
    height=40.0
)

button_image_4 = PhotoImage(
    file=relative_to_assets("button_4.png"))
button_4 = Button(
    image=button_image_4,
    borderwidth=0,
    highlightthickness=0,
    command=play_next_song,
    relief="flat"
)
button_4.place(
    x=755.0,
    y=638.0,
    width=45.0,
    height=38.0
)




'''button_image_5 = PhotoImage(
    file=relative_to_assets("button_5.png"))
button_5 = Button(
    image=button_image_5,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_5 clicked"),
    relief="flat"
)
button_5.place(
    x=707.0,
    y=629.0,
    width=41.0,
    height=61.0
)

play_Button = PhotoImage(
    file=relative_to_assets("button_6.png"))
button_6 = Button(
    image=play_Button,
    borderwidth=0,
    highlightthickness=0,
    command=play_song,
    relief="flat"
)
button_6.place(
    x=707.0,
    y=626.0,
    width=46.0,
    height=61.0
)'''

image_image_15 = PhotoImage(
    file=relative_to_assets("image_15.png"))
image_15 = canvas.create_image(
    234.0,
    659.0,
    image=image_image_15
)
'''
#the expict label icon
image_image_16 = PhotoImage(
    file=relative_to_assets("image_16.png"))
image_16 = canvas.create_image(
    540.0,
    653.0,
    image=image_image_16
)'''
#___________playing song___________________


canvas.create_rectangle(
    13.0,
    204.0,
    182.0,
    232.0,
    fill="#DFDFDF",
    outline="")
#--------------------------------------------------------------
canvas.create_text(
    31.0,
    210.0,
    anchor="nw",
    text="search",
    fill="#AAAAAA",
    font=("AndadaProRoman Regular", 14 * -1)
)

image_image_17 = PhotoImage(
    file=relative_to_assets("image_17.png"))
image_17 = canvas.create_image(
    30.0,
    218.0,
    image=image_image_17
)

canvas.create_text(
    46.0,
    274.0,
    anchor="nw",
    text="rocommended",
    fill="#424241",
    font=("AndadaProRoman Regular", 14 * -1)
)

canvas.create_text(
    13.0,
    299.0,
    anchor="nw",
    text="Kids mode",
    fill="#7D7D7D",
    font=("AndadaProRoman Bold", 12 * -1)
)

canvas.create_text(
    13.0,
    251.0,
    anchor="nw",
    text="Robofy Music",
    fill="#9F9E9B",
    font=("AndadaProRoman Bold", 12 * -1)
)

image_image_18 = PhotoImage(
    file=relative_to_assets("image_18.png"))
image_18 = canvas.create_image(
    32.0,
    282.0,
    image=image_image_18
)

canvas.create_text(
    632.0,
    306.0,
    anchor="nw",
    text="artist",
    fill="#7F7F7F",
    font=("AndadaProRoman Bold", 12 * -1)
)

canvas.create_text(
    213.0,
    306.0,
    anchor="nw",
    text="Song",
    fill="#7F7F7F",
    font=("AndadaProRoman Bold", 12 * -1)
)

canvas.create_text(
    926.0,
    306.0,
    anchor="nw",
    text="album",
    fill="#7F7F7F",
    font=("AndadaProRoman Bold", 12 * -1)
)

canvas.create_rectangle(
    617.0,
    304.0,
    618.0,
    320.0,
    fill="#E5E5E5",
    outline="")

canvas.create_rectangle(
    911.0,
    304.0,
    912.0,
    320.0,
    fill="#E5E5E5",
    outline="")

image_image_19 = PhotoImage(
    file=relative_to_assets("image_19.png"))
image_19 = canvas.create_image(
    351.0,
    193.0,
    image=image_image_19
)

button_image_7 = PhotoImage(
    file=relative_to_assets("button_7.png"))
button_7 = Button(
    image=button_image_7,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_7 clicked"),
    relief="flat"
)
button_7.place(
    x=844.0,
    y=641.0,
    width=30.0,
    height=31.0
)

button_image_8 = PhotoImage(
    file=relative_to_assets("button_8.png"))
button_8 = Button(
    image=button_image_8,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_8 clicked"),
    relief="flat"
)
button_8.place(
    x=884.0,
    y=641.0,
    width=32.0,
    height=31.0
)

button_image_9 = PhotoImage(
    file=relative_to_assets("button_9.png"))
button_9 = Button(
    image=button_image_9,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_9 clicked"),
    relief="flat"
)
button_9.place(
    x=589.0,
    y=658.0,
    width=20.0,
    height=26.0
)

button_image_10 = PhotoImage(
    file=relative_to_assets("button_10.png"))
button_10 = Button(
    image=button_image_10,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_10 clicked"),
    relief="flat"
)
button_10.place(
    x=813.0,
    y=257.0,
    width=20.0,
    height=28.0
)


button_image_12 = PhotoImage(
    file=relative_to_assets("button_12.png"))
button_12 = Button(
    image=button_image_12,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_12 clicked"),
    relief="flat"
)
button_12.place(
    x=1142.0,
    y=668.0,
    width=31.0,
    height=27.0
)

button_image_13 = PhotoImage(
    file=relative_to_assets("button_13.png"))
button_13 = Button(
    image=button_image_13,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_13 clicked"),
    relief="flat"
)
button_13.place(
    x=53.0,
    y=14.0,
    width=14.0,
    height=14.0
)

button_image_14 = PhotoImage(
    file=relative_to_assets("button_14.png"))
button_14 = Button(
    image=button_image_14,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_14 clicked"),
    relief="flat"
)
button_14.place(
    x=33.0,
    y=14.0,
    width=14.0,
    height=14.0
)

button_image_15 = PhotoImage(
    file=relative_to_assets("button_15.png"))
button_15 = Button(
    image=button_image_15,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_15 clicked"),
    relief="flat"
)
button_15.place(
    x=13.0,
    y=14.0,
    width=14.0,
    height=14.0
)

button_image_16 = PhotoImage(
    file=relative_to_assets("button_16.png"))
button_16 = Button(
    image=button_image_16,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_16 clicked"),
    relief="flat"
)
button_16.place(
    x=213.0,
    y=16.0,
    width=13.0,
    height=21.0
)

button_image_17 = PhotoImage(
    file=relative_to_assets("button_17.png"))
button_17 = Button(
    image=button_image_17,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_17 clicked"),
    relief="flat"
)
button_17.place(
    x=247.0,
    y=16.0,
    width=14.0,
    height=22.0
)

# Create a canvas to contain the treeview and scrollbar
music_frame = tk.Frame(window, width=970, height=277)
music_frame.place(x=210.0, y=330)

# Add a scrollbar to the canvas
scrollbar = tk.Scrollbar(music_frame)
playList = tk.Listbox(music_frame, width=160, height=17, highlightthickness=0, highlightbackground="white", bd=0, yscrollcommand=scrollbar.set)
tree = ttk.Treeview(music_frame, columns=("SongName", "ArtistName", "ExplicitLabel"), height=14, show="", yscrollcommand=scrollbar.set)
scrollbar.config(command=tree.yview)
scrollbar.pack(side="right", fill="y")
tree.pack(side="left", fill="both")

# Function to insert a song entry with custom view
def insert_song_entry(song_name, artist_name, explicit_label):
    # Insert a new row with the song name, artist name, and explicit label
    tree.insert("", tk.END, values=(song_name, artist_name, explicit_label))

# Adjust the column widths
tree.column("SongName", width=407)
tree.column("ArtistName", width=295)
tree.column("ExplicitLabel", width=270)





# Iterate over the files in the directory and print their names
music_dir = "D:/college/GP/songs/"

# Get a list of all the music files in the directory
music_files = [file for file in os.listdir(music_dir) if file.endswith(".mp3")]

# Insert the music files into the Listbox
for row in rows:
    song_name = row[0]
    artist_name = row[1]
    explicit_label = row[2]
    # Concatenate the song name, artist name, and explicit label
    item_text = f"{song_name} - {artist_name} ({explicit_label})"
    insert_song_entry(song_name, artist_name, explicit_label)
    playList.insert(tk.END, item_text)
    
def on_tree_select(column):
    # Get the selected item
    selected_item = tree.selection()[0]

    # Get the values of the selected item (song_name, artist_name, explicit_label)
    values = tree.item(selected_item, "values")

    # Retrieve the song name, artist name, and explicit label from the values
    song_name = values[0]
    artist_name = values[1]
    explicit_label = values[2]
    
    # Return the value based on the specified column index
    if column == 0:
        return song_name
    elif column == 1:
        return artist_name
    elif column == 2:
        return explicit_label
    
    

'''def song_name_without_extension():
    filename_with_extension = os.path.basename(playList.get(ACTIVE))
    filename, extension = os.path.splitext(filename_with_extension)
    return filename


def return_song_name_label():
    #assgin the name of the song
    text = song_name_without_extension()
    song_name_only = os.path.splitext(text)[0]
    # Split the song name into two parts
    split_text = song_name_only.split("-")
    #return the name
    song_name_label = split_text[0]
    return song_name_label
def return_song_album():
    # assgin the name of the song
    text = song_name_without_extension()
    song_name_only = os.path.splitext(text)[0]
    # Split the song name into two parts
    split_text = song_name_only.split("-")
    #return the album
    song_album = split_text[1]
    return song_album

'''

def return_fist_item_inThe_playList():
    first_item = tree.get_children()[0]
    first_item_values = tree.item(first_item, "values")
    return first_item_values
return_fist_item_inThe_playList()

def return_songName():
    # Get the selected item
    selected_items = tree.selection()
    if selected_items:
        # Get the values of the selected item (song_name, artist_name, explicit_label)
        selected_item = selected_items[0]
        values = tree.item(selected_item, "values")
    
        # Retrieve the song name, artist name, and explicit label from the values
        song_name = values[0]
        return song_name
    
    else:
        selected_items = return_fist_item_inThe_playList()
        song_name = selected_items[0]
        return song_name

def return_artistName():
    # Get the selected item
    selected_items = tree.selection()
    if selected_items:
        # Get the values of the selected item (song_name, artist_name, explicit_label)
        selected_item = selected_items[0]
        values = tree.item(selected_item, "values")
    
        # Retrieve the song name, artist name, and explicit label from the values
        artist_name = values[1]
        return artist_name
    
    else:
        selected_items = return_fist_item_inThe_playList()
        artist_name = selected_items[1]
        return artist_name

def update_icon_visibility():
    print ("hereeeeeeeeeeeeee")
    explicit_label = int(return_the_explictLabel())
    print(explicit_label)
    if explicit_label == 1:
        icon_label.place(x=540.0, y=640.0)
        print("nooooooooooooooooooooooooooooooooooooooo")
    else:
        icon_label.place_forget()
        
def return_the_explictLabel():
    # Get the selected item
    selected_items = tree.selection()
    if selected_items:
        # Get the values of the selected item (song_name, artist_name, explicit_label)
        selected_item = selected_items[0]
        values = tree.item(selected_item, "values")
    
        # Retrieve the song name, artist name, and explicit label from the values
        explict_label = values[2]
        return explict_label
    
    else:
        selected_items = return_fist_item_inThe_playList()
        explict_label = selected_items[2]
        return explict_label




def return_active_song_path():
    song_name = return_songName()
    artist_name = return_artistName()
    # Retrieve the music path from the database based on the selected song
    cursor.execute("SELECT MusicPath FROM SongsClassification WHERE SongName = ? AND ArtistName = ?", (song_name, artist_name))
    result = cursor.fetchone()
    music_path = result[0]
    
    return music_path
    

'''def return_the_songName():
    selected_song = playList.get(playList.curselection())
    print(selected_song)
    
    song_artist, explicit_label = selected_song.split(" (")
    song_name, artist_name = song_artist.split(" - ")
    song_name = song_name.strip()
    artist_name = artist_name.strip()
    return song_name


def return_the_artistName():
    selected_song = playList.get(playList.curselection())
    print(selected_song)
    
    song_artist, explicit_label = selected_song.split(" (")
    song_name, artist_name = song_artist.split(" - ")
    song_name = song_name.strip()
    artist_name = artist_name.strip()
    return artist_name
 '''   
def limit_the_text_length():
    # Truncate the text and add "..." if it's too long
    max_length = 20  # Maximum length of text to show
    if len(return_songName()) > max_length:
        truncated_text = return_songName()[:max_length] + "..."
    else:
        truncated_text = return_songName()

    return truncated_text

def limit_the_album_length():
    # Truncate the text and add "..." if it's too long
    max_length = 50  # Maximum length of text to show
    if len(return_artistName()) > max_length:
        truncated_text = return_artistName()[:max_length] + "..."
    else:
        truncated_text = return_artistName()

    return truncated_text

def music_duration():
    #select the song
    song_mut=MP3(return_active_song_path())
    #get the song length
    song_mut_lenght = song_mut.info.length
    #convert into mins and secs
    song_mut_lenght_convertion = time.strftime('%M:%S',time.gmtime(song_mut_lenght))
    return song_mut_lenght_convertion

def music_current_time():
    #start from 0
    current_time = mixer.music.get_pos()/1000
    #convertion
    current_time_convertion =  time.strftime('%M:%S',time.gmtime(current_time))
    return current_time_convertion

def update_active_song_time():
    selected_items = tree.selection()
    if selected_items:
        if music_current_time() <= music_duration():
            # Update the label text
            active_song_time.config(text=music_current_time())
        
            # Schedule the function to be called again in 1000 milliseconds (1 second)
            active_song_time.after(1000, update_active_song_time)
        else:
            active_song_time.config(text="00:00")
            play_next_song()
    else:
        active_song_time.config(text="00:00")
        

def update_time_bar():
    # Get the current time and duration of the music
    current_time = mixer.music.get_pos()/1000
    song_mut = MP3(return_active_song_path())
    # get the song length
    song_mut_lenght = song_mut.info.length
    duration = song_mut_lenght

    # Calculate the percentage of the music that has been played
    percent_complete = current_time / duration
    print(percent_complete)

    # Update the progress bar value
    time_bar.config(value=percent_complete * 100)

    # Schedule the function to be called again in 1000 milliseconds (1 second)
    time_bar.after(1000, update_time_bar)
'''
active_song = [{
    "name":  song_name_without_extension(),
    "image": "",
    "duration": music_duration(),
    "current_time": music_current_time()
}]
print(active_song[0]["name"])
print(active_song[0]["duration"])
print(active_song[0]["current_time"])
'''



# Create PhotoImage objects for the play and pause button icons
play_icon = tk.PhotoImage(file=relative_to_assets("button_6.png"))
pause_icon = tk.PhotoImage(file=relative_to_assets("button_5.png"))

# Create Button widgets with the play and pause icons
pause_button = tk.Button(window, image=pause_icon, borderwidth=0, highlightthickness=0, command=toggle_playback)
pause_button.place(x=707.0, y=626.0, width=46.0, height=61.0)

play_button = tk.Button(window, image=play_icon, borderwidth=0, highlightthickness=0, command=toggle_playback)
play_button.place(x=707.0, y=626.0, width=46.0, height=61.0)

#active song name and details view
duration_text = tk.Label(window,font=("SFProText Medium", 12 * -1), fg="#BDBDBD", anchor="nw", text=music_duration(),bg="#FFFFFF")
duration_text.place(x=1145, y=627)

active_song_name = tk.Label(window,font=("SFProText Semibold", 14 * -1), fg="#262626",anchor="nw", text=limit_the_text_length(),bg="#FFFFFF")
active_song_name.place(x=403, y=646)

active_song_album = tk.Label(window,font=("ABeeZee Regular", 12 * -1), fg="#808080",anchor="nw", text=limit_the_album_length(),bg="#FFFFFF")
active_song_album.place(x=288, y=674)

active_song_time = tk.Label(window,font=("SFProText Medium", 12 * -1), fg="#BDBDBD",anchor="nw", text=music_current_time(),bg="#FFFFFF")
active_song_time.place(x=313, y=627)

update_active_song_time()


# Create the icon widget
icon_image = tk.PhotoImage(file="D:/college/GP/assets/frame0/image_16.png")
icon_label = tk.Label(window, image=icon_image)

# Pack the icon label widget
icon_label.place()

# Call the update_icon_visibility function to initially set the icon visibility
update_icon_visibility()

# Function to update the icon visibility whenever needed
def on_update_icon_visibility():
    update_icon_visibility()


# Create a progress bar widget
style = ttk.Style()
style.theme_use('default')

# Override default styles
style.configure('custom.Horizontal.TProgressbar', troughcolor='#E5E5E5', bordercolor='#E5E5E5',
     background='#737373', lightcolor='#737373', darkcolor='#737373',
    relief='flat', thickness=10)

style.layout('custom.Horizontal.TProgressbar',
    [('Horizontal.Progressbar.trough',
        {'children': [('Horizontal.Progressbar.pbar',
                        {'side': 'left', 'sticky': 'ns'})],
        'sticky': 'nswe',
        'border': '0'}),
    ('Horizontal.Progressbar.label', {'sticky': ''})])

# Raise priority
style.map('custom.Horizontal.TProgressbar',
    foreground=[('disabled', 'blue')])
# Create progress bar
time_bar = tk.ttk.Progressbar(window, orient=tk.HORIZONTAL, mode='determinate', length=1010, style='custom.Horizontal.TProgressbar')
time_bar.place(x=191, y=602)

canvas.create_rectangle(
    191.0,
    607.0,
    1200.0,
    612.2664184570312,
    fill="#E5E5E5",
    outline="")

canvas.create_rectangle(
    191.0,
    607.0,
    362.93719482421875,
    612.2664184570312,
    fill="#737373",
    outline="")
#show lyrics

def get_lyrics():
    lyrics = "hi this is supposed to be the music lyrics...."
    return  lyrics
def show_lyrics():
    # Get the lyrics of the current song
    lyrics = get_lyrics()

    # Create a new window to display the lyrics
    lyrics_window = tk.Toplevel()
    lyrics_label = tk.Label(lyrics_window, text=lyrics)
    lyrics_label.pack()

    #window widgets
    lyrics_window.configure(bg="#FFFFFF")
    # Position the window relative to the button
    button_x = 1107
    button_y = 668
    button_width = 23
    button_height = 25
    x = button_x - 115
    y = button_y
    lyrics_window.geometry("+{}+{}".format(x, y))

button_image_11 = PhotoImage(file=relative_to_assets("button_11.png"))
button_11 = Button(
    image=button_image_11,
    borderwidth=0,
    highlightthickness=0,
    command=show_lyrics,
    relief="flat"
)
button_11.place(
    x=1107.0,
    y=668.0,
    width=23.0,
    height=25.0
)
window.resizable(False, False)
window.mainloop()
